Notes
=====

Revision
--------

 - Jul  9, 2009.  Updated
 - Jan 25, 2009.  Initial


Shader Parameter
----------------

シェーダパラメータは初期値(デフォルト値)を取ることができる.
シェーダパラメータの扱いは以下のように実現してはどうか?

動作
~~~~

LLVM 側には、コンパイル時にシェーダパラメータの構造体を生成する. ::

surface matte(float Ka; float Kb) {}

->

typedef struct _shader_param_matte_t {
    float Ka;
    float Kb;
} shader_param_matte_t;

ただしこれは C 側には見えない.
シェーダパラメータを格納するための構造体のサイズを返す関数を用意する.::

size_t get_shader_param_size_matte(){
	return x;
}

C 側はこのサイズを用いてバッファを確保する. ::

size_t sz = runFunction("get_shader_param_size_matte");
void *shader_param_buf = malloc(sz);
　 
LLVM 側にはシェーダパラメータをデフォルト値で初期化する関数を用意する.

void init_shader_param_matte();

C 側では、init_shader_param_matte() を呼んだのち、必要に応じてシェーダパラメータを設定する. LLVM 側には各シェーダパラメータを設定する関数を用意する.

void set_param_matte(string param_name, void *value);

ただし、この API だと、parameter 名から実際の構造体へのオフセットへのマッピングをハッシュ表などを用いて求めないといけない. param 名からオフセット値の取得は別途用意しておくのもいいだろう.

シェーダ設定関数は、たとえばこれは JIT で生成してしまうのも手である.
特に specialization を行うことを考えると、C と LLVM 間でのパラメータのバインディングなどは JIT で行ってしまうのがいいだろう.



Refactoring
-----------

コードをもっと綺麗にする. 重複している部分をまとめる.
SYB を使う. 型処理は Typing Haskell in Haskell や Haskell Rules などを参考にしてみる.


LLVM codegen
------------

Haskell の LLVM binding を使うことは考えていない. LLVM ライブラリとのリンクが必要になるから.
現状は直接 LLVM IR の string を吐いている. ::

  BinOp (Just sym) op e0 e1            -> concat
       [ gen n e0
       , gen n e1
       , indent n ++ "%" ++ getNameOfSym sym ++ " = "
       , emitOp op ++ " "
       , emitTy (getTyOfSym sym) ++ " " ++ getReg e0 ++ " , "
       , getReg e1
       , ";\n"
       ]

もう少しモナドなどを利用して, 綺麗にしたい. 
llvm バインディングや、parsec に近い形で記述できるように. こんな風. ::

  BinOp (Just sym) op e0 e1 ->
    do lhs  <- gen n e0
       rhd  <- gen n e1
       dst  <- getReg sym
       code <- binOp op dst lhs rhs
       return code

Error 処理
----------

Error 文字列の出力をよりきちんと. 今は error でその場で error を吐いて終わりにしている. Error モナドを使う?

パースエラーは、エラーの起きた行ではなくて、expression 全体を表示したい. clang の expressive error report のように.


AST
---

AST データ構造には SourcePos 情報も入れる. SourcePos は Parsec で定義されている. こうしておくと、後々の処理でエラーを表示するときに、対応するソースの位置を示すことができる.

Typing
------

現在は parse 後に type check を行っているが、これを Parse の段階でできないか.
もっとましな型チェックシステムを作る.
Haskell Rules を参考にしてみる.

http://web.engr.oregonstate.edu/~erwig/HaskellRules/

行数
----

なるべく 1 万行以下に抑える.
xmonad を参考にする.


Polymorphic 関数
----------------

Polymorphic 関数の処理をもっとマシにする.


Specialization
--------------

expression が変数 x に依存するかしないかの判定を行うアルゴリズムをかく.
expression tree に対するグラフ処理が必要.
fgl(Functional Graph Library) を使うことを考える.

式変換
------

最適化や、型変換 expression 挿入など, AST ツリーをいじりたいときがある.
SYB(Scrap your boilerplate) や RecLib を参考にしてみる.

http://web.engr.oregonstate.edu/~erwig/reclib/

また、このような変換を主に開発されたシステムである Stratego というのがある.
AST のフォーマットを合わせれば、Stratego で変換ルールを記述して AST tree に apply, というのもできるかもしれない.

http://www.program-transformation.org/Stratego/WebHome


Builtin
-------

Builtin 関数の定義をより code less にする. ベクトル型(color, vector, normal)はまとめるなど. 


Nested function
---------------

Parse の段階でまず nested function には一意の名前を付加する.
nested function は LLVM IR では global scope で定義することになるが、このとき名前がほかの nested function とかぶらないように.

nested function をコールする expr がある場合は、そのコールを一意の関数のコールへと変換する. ::

  float nested(float t) {
    return t * t;
  }

  -> define nested.1(...)

  float x = nested(3.0) -> call nested.1(...)


配列
----

RSL は配列をサポートする.

配列の initializer
~~~~~~~~~~~~~~~~~~

中括弧で配列の initializer を表現する.

::

  float a[4] = {1, 2, 3, 4};

左値としての配列
~~~~~~~~~~~~~~~~

左値に配列アクセスが出現する場合は配列の特定位置への代入とみなす.


::

  float a[4];

  a[0] = 1.0;

右値に配列アクセスが出現する場合は配列のリードとみなす.

::

  float a[4];

  float m = a[2];


両方を表現するための最適な AST 表現はなんだろうか?

LArrayRef, RArrayRef と分けるか, どちらも ArrayRef として表現するか?

エラーレポート
~~~~~~~~~~~~~~

エラー表示のために、RSLLoc を導入する. これはトークンのソースコードの位置などを記録する. エラーの時はこの情報を使って expressive なエラー表示を行う.
Parsec の SourceLoc を流用する手もあるが、独自に再定義することにする.

ポリモーフィック関数と subtyping
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

RSL には polymorphic で subtyping な性質をもつ(かもしれない)関数がある.

例::


  float noise(float);
  float noise(point);
  point noise(float);
  point noise(point);

現在, typing のステージにおいては型判定は単純に関数定義のリストに対して arg の型でマッチングを取っているだけである. そのため, 以下のケースが判定できない. ::

  float x = noise(1.0);	// 内部では point noise(float) にマッチしてしまう.

対策としては内部の関数定義に多相型を扱えるようにサポートするようにすることである. これは取りうる型のリスト(product)を持つようにすればいいだろうか. ::

  def: [float, point] noise([float, point]);

  float x = noise(1.0) // resTy = float, argTys = [float]

  -> [float, point] noise([(float), point])
  -> [float, point] noise(float)
  -> [(float), point] noise(float)
  -> float noise(float)
  -> matched.


ここのあたりの問題は, 型理論の世界で bounded quantization と呼んでいるらしい. これを使うともう少し sophisticated な型判定ルーチンとなるだろうか. TAPL 参照のこと.


TODO
----

- 配列のサポート
- pnoise, cellnoise
- calculatenormal
- spline
- illuminate
- パースエラー表示の改善
- Haddock 化を行う.
- break, continue のサポート

