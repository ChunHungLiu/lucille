// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "gui.h"
#include <stdio.h>
#include <stdlib.h>
#include "callbacks.h"

Fl_Double_Window *renderWindow=(Fl_Double_Window *)0;

static void cb_Quit(Fl_Menu_*, void*) {
  exit(1);
}

static void cb_Help(Fl_Menu_*, void*) {
  help_cb();
}

Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0x71,  (Fl_Callback*)cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Help", 0,  (Fl_Callback*)cb_Help, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

MyGLWindow *GLWindow=(MyGLWindow *)0;

Fl_Light_Button *buttonSpecialization=(Fl_Light_Button *)0;

static void cb_buttonSpecialization(Fl_Light_Button*, void*) {
  specialization_cb();
}

Fl_Light_Button *button4x4Update=(Fl_Light_Button *)0;

static void cb_button4x4Update(Fl_Light_Button*, void*) {
  coarse_update_cb();
}

Fl_Output *secDisplay=(Fl_Output *)0;

Fl_Double_Window* makeRenderWindow() {
  { renderWindow = new Fl_Double_Window(405, 320);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 565, 25);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Group* o = new Fl_Group(5, 30, 555, 425);
      { GLWindow = new MyGLWindow(5, 30, 256, 256, "GLWindow");
        GLWindow->box(FL_NO_BOX);
        GLWindow->color(FL_BACKGROUND_COLOR);
        GLWindow->selection_color(FL_BACKGROUND_COLOR);
        GLWindow->labeltype(FL_NORMAL_LABEL);
        GLWindow->labelfont(0);
        GLWindow->labelsize(14);
        GLWindow->labelcolor(FL_FOREGROUND_COLOR);
        GLWindow->align(FL_ALIGN_CENTER);
        GLWindow->when(FL_WHEN_RELEASE);
      } // MyGLWindow* GLWindow
      { buttonSpecialization = new Fl_Light_Button(270, 60, 110, 25, "Specialization");
        buttonSpecialization->box(FL_THIN_UP_BOX);
        buttonSpecialization->callback((Fl_Callback*)cb_buttonSpecialization);
      } // Fl_Light_Button* buttonSpecialization
      { button4x4Update = new Fl_Light_Button(270, 95, 110, 25, "4x4 update");
        button4x4Update->box(FL_THIN_UP_BOX);
        button4x4Update->callback((Fl_Callback*)cb_button4x4Update);
      } // Fl_Light_Button* button4x4Update
      { secDisplay = new Fl_Output(270, 260, 110, 25);
        secDisplay->box(FL_THIN_DOWN_BOX);
      } // Fl_Output* secDisplay
      o->end();
    } // Fl_Group* o
    renderWindow->end();
  } // Fl_Double_Window* renderWindow
  return renderWindow;
}

Fl_Double_Window *shaderWindow=(Fl_Double_Window *)0;

Fl_Tabs *shaderDisplayTab=(Fl_Tabs *)0;

Fl_Text_Display *rslTextDisplay=(Fl_Text_Display *)0;

Fl_Text_Display *llvmTextDisplay=(Fl_Text_Display *)0;

Fl_Double_Window* makeShaderWindow() {
  { shaderWindow = new Fl_Double_Window(550, 480);
    { shaderDisplayTab = new Fl_Tabs(5, 5, 540, 415);
      { Fl_Group* o = new Fl_Group(5, 35, 540, 385, "RSL");
        { rslTextDisplay = new Fl_Text_Display(10, 40, 530, 375);
          rslTextDisplay->labelfont(13);
          rslTextDisplay->labelsize(9);
          rslTextDisplay->textfont(13);
          rslTextDisplay->textsize(12);
        } // Fl_Text_Display* rslTextDisplay
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 35, 540, 385, "LLVM IR");
        o->hide();
        { llvmTextDisplay = new Fl_Text_Display(10, 40, 530, 375);
        } // Fl_Text_Display* llvmTextDisplay
        o->end();
      } // Fl_Group* o
      shaderDisplayTab->end();
    } // Fl_Tabs* shaderDisplayTab
    shaderWindow->end();
  } // Fl_Double_Window* shaderWindow
  return shaderWindow;
}
Fl_Text_Buffer *rslTextBuf; 
Fl_Text_Buffer *llvmTextBuf; 
