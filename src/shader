accel.c:		for (i = 0; i < geom->nindices / 3; i++) {
accel.c:			v[0] = geom->positions[geom->indices[3 * i + 0]];	
accel.c:			v[1] = geom->positions[geom->indices[3 * i + 1]];	
accel.c:			v[2] = geom->positions[geom->indices[3 * i + 2]];	
accel.c:		for (i = 0; i < geom->nindices / 3; i++) {
accel.c:			v[0] = geom->positions[geom->indices[3 * i + 0]];	
accel.c:			v[1] = geom->positions[geom->indices[3 * i + 1]];	
accel.c:			v[2] = geom->positions[geom->indices[3 * i + 2]];	
accel.c:		for (i = 0; i < geom->npositions; i++) {
accel.c:			v = geom->positions[i];
accel.c:		ntris += geom->nindices / 3;
accel.c:			i0 = geom->indices[index + 0];
accel.c:			i1 = geom->indices[index + 1];
accel.c:			i2 = geom->indices[index + 2];
accel.c:			v0 = &(geom->positions[i0]);
accel.c:			v1 = &(geom->positions[i1]);
accel.c:			v2 = &(geom->positions[i2]);
accel.c:		i0 = geom->indices[index + 0];
accel.c:		i1 = geom->indices[index + 1];
accel.c:		i2 = geom->indices[index + 2];
accel.c:		v0 = &(geom->positions[i0]);
accel.c:		v1 = &(geom->positions[i1]);
accel.c:		v2 = &(geom->positions[i2]);
accel.c:			i0 = geom->indices[index + 0];
accel.c:			i1 = geom->indices[index + 1];
accel.c:			i2 = geom->indices[index + 2];
accel.c:			v0 = &(geom->positions[i0]);
accel.c:			v1 = &(geom->positions[i1]);
accel.c:			v2 = &(geom->positions[i2]);
bsp.c:		ntris += geom->nindices / 3;
bsp.c:		for (i = 0; i < (long)geom->nindices / 3; i++) {
bsp.c:			id[0] = geom->indices[3 * i + 0];	
bsp.c:			id[1] = geom->indices[3 * i + 1];	
bsp.c:			id[2] = geom->indices[3 * i + 2];	
bsp.c:			ri_vector_copy(vecp, geom->positions[id[0]]);
bsp.c:			ri_vector_copy(vecp, geom->positions[id[1]]);
bsp.c:			ri_vector_copy(vecp, geom->positions[id[2]]);
bsp.c:		ntris += geom->nindices / 3;
bssrdf.c:	counts = (int *)ri_mem_alloc(sizeof(int) * (geom->nindices / 3));
bssrdf.c:	for (i = 0; i < geom->nindices / 3; i++) {
bssrdf.c:	for (i = 0; i < geom->nindices / 3; i++) {
bssrdf.c:		v0 = geom->positions[geom->indices[i * 3 + 0]];
bssrdf.c:		v1 = geom->positions[geom->indices[i * 3 + 1]];
bssrdf.c:		v2 = geom->positions[geom->indices[i * 3 + 2]];
bssrdf.c:		v0 = geom->positions[geom->indices[i0]];
bssrdf.c:		v1 = geom->positions[geom->indices[i1]];
bssrdf.c:		v2 = geom->positions[geom->indices[i2]];
bssrdf.c:		if (geom->normals) {
bssrdf.c:			n0 = geom->normals[i0];
bssrdf.c:			n1 = geom->normals[i1];
bssrdf.c:			n2 = geom->normals[i2];
geom.c:	ri_mem_free(geom->positions);
geom.c:	ri_mem_free(geom->normals);
geom.c:	ri_mem_free(geom->tangents);
geom.c:	ri_mem_free(geom->binormals);
geom.c:	ri_mem_free(geom->indices);
geom.c:	ri_mem_free(geom->texcoords);
geom.c:	ri_mem_free(geom->colors);
geom.c:	ri_mem_free(geom->opacities);
geom.c:	ri_mem_free(geom->shader);
geom.c:	geom->positions = p;
geom.c:	geom->npositions = npositions;
geom.c:	geom->normals  = p;
geom.c:	geom->nnormals = nnormals;
geom.c:	geom->tangents  = p;
geom.c:	geom->ntangents = ntangents;
geom.c:	geom->binormals  = p;
geom.c:	geom->nbinormals = nbinormals;
geom.c:	geom->colors  = p;
geom.c:	geom->ncolors = ncolors;
geom.c:	geom->opacities  = p;
geom.c:	geom->nopacities = nopacities;
geom.c:	geom->texcoords  = p;
geom.c:	geom->ntexcoords = ntexcoords;
geom.c:	geom->indices  = p;
geom.c:	geom->nindices = nindices;
geom.c:	for (i = 0; i < geom->nindices / 3; i++) {
geom.c:		i0 = geom->indices[3 * i + 0];	
geom.c:		i1 = geom->indices[3 * i + 1];	
geom.c:		i2 = geom->indices[3 * i + 2];	
geom.c:		v0 = geom->positions[i0];
geom.c:		v1 = geom->positions[i1];
geom.c:		v2 = geom->positions[i2];
light.c:	i = (int)(randomMT() * (light->geom->nindices / 3));
light.c:	v0 = light->geom->positions[light->geom->indices[3 * i + 0]];
light.c:	v1 = light->geom->positions[light->geom->indices[3 * i + 1]];
light.c:	v2 = light->geom->positions[light->geom->indices[3 * i + 2]];
loader_obj.c:	//geom->material = ri_material_new();
orgprt.c:	nvertices = (int)geom->npositions;
orgprt.c:	nelems = (int)(ceil((double)geom->npositions / ri_parallel_ntasks()));
orgprt.c:	if (start + span > (int)geom->npositions) {
orgprt.c:		span = (int)geom->npositions - start;
orgprt.c:	printf("nvert = %d\n", geom->npositions);
orgprt.c:	printf("nfaces = %d\n", geom->nindices / 3);
orgprt.c:		p = geom->positions[start + i];
orgprt.c:		n = geom->normals[start + i];
orgprt.c:					     geom->positions[start + i],
orgprt.c:					     geom->normals[start + i]);
orgprt.c:				      geom->positions[start + i],
orgprt.c:				      geom->normals[start + i]);
orgprt.c:	if (index + 2 >= geom->nindices) {
orgprt.c:		printf("geom->nindices = %d, index = %d\n",
orgprt.c:		       geom->nindices, index); 
orgprt.c:	i0 = geom->indices[index + 0];
orgprt.c:	i1 = geom->indices[index + 1];
orgprt.c:	i2 = geom->indices[index + 2];
orgprt.c:	curr = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
orgprt.c:	for (i = 0; i < geom->npositions; i++) {
orgprt.c:	prev = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
orgprt.c:	for (i = 0; i < geom->npositions; i++) {
orgprt.c:	accum = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
orgprt.c:	for (i = 0; i < geom->npositions; i++) {
orgprt.c:		for (i = 0; i < geom->npositions; i++) {
orgprt.c:			       l+1, npass, i, geom->npositions);
orgprt.c:		for (i = 0; i < geom->npositions; i++) {
orgprt.c:	for (i = 0; i < geom->npositions; i++) {
orgprt.c:			ri_vector_copy(&(ray.org), geom->positions[vtxindex]);
orgprt.c:			normal = &(geom->normals[vtxindex]);
orgprt.c:			ri_vector_copy(&(ray.org), geom->positions[vtxindex]);
orgprt.c:			normal = &(geom->normals[vtxindex]);
photonmap.c:		d = vec_avg(surfinfo->geom->material->kd);
photonmap.c:		s = vec_avg(surfinfo->geom->material->ks);
photonmap.c:		t = vec_avg(surfinfo->geom->material->kt);
photonmap.c:	for (i = 0; i < geom->nindices / 3; i++) {
photonmap.c:		i0 = geom->indices[3 * i + 0];	
photonmap.c:		i1 = geom->indices[3 * i + 1];	
photonmap.c:		i2 = geom->indices[3 * i + 2];	
photonmap.c:		v0 = geom->positions[i0];
photonmap.c:		v1 = geom->positions[i1];
photonmap.c:		v2 = geom->positions[i2];
polygon.c:	if (!geom->tangents) {
polygon.c:		geom->tangents = (ri_vector_t *)
polygon.c:					      geom->npositions);
polygon.c:		geom->ntangents = geom->npositions;
polygon.c:	if (!geom->binormals) {
polygon.c:		geom->binormals = (ri_vector_t *)
polygon.c:					        geom->npositions);
polygon.c:		geom->nbinormals = geom->npositions;
polygon.c:	if (!geom->texcoords) {
polygon.c:		for (i = 0; i < geom->npositions; i++) {
polygon.c:			ri_ortho_basis(tmpbasis, geom->normals[i]);
polygon.c:			ri_vector_copy(&(geom->tangents[i]), tmpbasis[0]);
polygon.c:			ri_vector_copy(&(geom->binormals[i]), tmpbasis[1]);
polygon.c:	for (i = 0; i < geom->npositions; i++) {
polygon.c:		ri_vector_zero(&(geom->tangents[i]));
polygon.c:		ri_vector_zero(&(geom->binormals[i]));
polygon.c:	for (i = 0; i < geom->nindices / 3; i++) {
polygon.c:			id[j] = geom->indices[3 * i + j];
polygon.c:		v0 = &(geom->positions[id[0]]);
polygon.c:		v1 = &(geom->positions[id[1]]);
polygon.c:		v2 = &(geom->positions[id[2]]);
polygon.c:		du1 = geom->texcoords[2*id[1]+0] - geom->texcoords[2*id[0]+0];
polygon.c:		du2 = geom->texcoords[2*id[2]+0] - geom->texcoords[2*id[0]+0];
polygon.c:		dv1 = geom->texcoords[2*id[1]+1] - geom->texcoords[2*id[0]+1];
polygon.c:		dv2 = geom->texcoords[2*id[2]+1] - geom->texcoords[2*id[0]+1];
polygon.c:				tmp.e[0] = geom->normals[id[j]].e[1];
polygon.c:				tmp.e[1] = geom->normals[id[j]].e[2];
polygon.c:				tmp.e[2] = geom->normals[id[j]].e[0];
polygon.c:						 geom->normals[id[j]],
polygon.c:				ri_vector_add(&(geom->tangents[id[j]]),
polygon.c:					      geom->tangents[id[j]],
polygon.c:				ri_vector_add(&(geom->tangents[id[j]]),
polygon.c:					      geom->tangents[id[j]],
polygon.c:	for (i = 0; i < geom->npositions; i++) {
polygon.c:		ri_vector_normalize(&(geom->tangents[i]));
polygon.c:		printf("n dot t = %f\n", ri_vector_dot3(geom->normals[i],
polygon.c:							geom->tangents[i]));
polygon.c:		ri_vector_cross3(&(geom->binormals[i]),
polygon.c:				 geom->tangents[i],
polygon.c:				 geom->normals[i]);
polygon.c:		ri_vector_normalize(&(geom->binormals[i]));
polygon.c:		ri_vector_cross3(&(geom->tangents[i]),
polygon.c:				 geom->normals[i],
polygon.c:				 geom->binormals[i]);
polygon.c:		ri_vector_normalize(&(geom->tangents[i]));
polygon.c:			geom->normals[i].e[0],
polygon.c:			geom->normals[i].e[1],
polygon.c:			geom->normals[i].e[2]);
polygon.c:			geom->tangents[i].e[0],
polygon.c:			geom->tangents[i].e[1],
polygon.c:			geom->tangents[i].e[2]);
polygon.c:		printf("n dot t' = %f\n", ri_vector_dot3(geom->normals[i],
polygon.c:							geom->tangents[i]));
polygon.c:	for (i = 0; i < geom->nindices / 3; i++) {
prt.c:	nvertices = (int)geom->npositions;
prt.c:	nelems = (int)(ceil((double)geom->npositions / ri_parallel_ntasks()));
prt.c:	if (start + span > (int)geom->npositions) {
prt.c:		span = (int)geom->npositions - start;
prt.c:	printf("nvert = %d\n", geom->npositions);
prt.c:	printf("nfaces = %d\n", geom->nindices / 3);
prt.c:		p = geom->positions[start + i];
prt.c:		n = geom->normals[start + i];
prt.c:					     geom->positions[start + i],
prt.c:					     geom->normals[start + i]);
prt.c:				      geom->positions[start + i],
prt.c:				      geom->normals[start + i]);
prt.c:		currlist[objid] = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
prt.c:		prevlist[objid] = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
prt.c:		accumlist[objid] = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
prt.c:		for (i = 0; i < (int)geom->npositions; i++) {
prt.c:	for (i = 0; i < (int)geom->npositions; i++) {
prt.c:	if (index + 2 >= geom->nindices) {
prt.c:		printf("geom->nindices = %d, index = %d\n",
prt.c:		       geom->nindices, index); 
prt.c:	i0 = geom->indices[index + 0];
prt.c:	i1 = geom->indices[index + 1];
prt.c:	i2 = geom->indices[index + 2];
prt.c:	curr = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
prt.c:	for (i = 0; i < geom->npositions; i++) {
prt.c:	prev = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
prt.c:	for (i = 0; i < geom->npositions; i++) {
prt.c:	accum = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
prt.c:	for (i = 0; i < geom->npositions; i++) {
prt.c:		for (i = 0; i < geom->npositions; i++) {
prt.c:			       l+1, npass, i, geom->npositions);
prt.c:		for (i = 0; i < geom->npositions; i++) {
prt.c:	for (i = 0; i < geom->npositions; i++) {
prt.c:	//curr = (shcoeff_t *)ri_mem_alloc(sizeof(shcoeff_t) * geom->npositions);
prt.c:	for (i = 0; i < geom->npositions; i++) {
prt.c:	for (i = 0; i < geom->npositions; i++) {
prt.c:		printf(" sampling vtx[%d] / %d \n", i, geom->npositions);
prt.c:	for (i = 0; i < geom->npositions; i++) {
prt.c:		normal = &(geom->normals[vtxindex]);
prt.c:		ri_vector_copy(&(ray.org), geom->positions[vtxindex]);
prt.c:			ri_vector_copy(&(ray.org), geom->positions[vtxindex]);
prt.c:			normal = &(geom->normals[vtxindex]);
prt.c:			ri_vector_copy(&(ray.org), geom->positions[vtxindex]);
prt.c:			normal = &(geom->normals[vtxindex]);
quadric.c:	geom->kd = 0.75;
quadric.c:	geom->ks = 0.0;
raytrace.c:	npolys = geom->nindices / 3;
raytrace.c:		i0 = geom->indices[3 * i + 0];
raytrace.c:		i1 = geom->indices[3 * i + 1];
raytrace.c:		i2 = geom->indices[3 * i + 2];
raytrace.c:		v0 = geom->positions[i0];
raytrace.c:		v1 = geom->positions[i1];
raytrace.c:		v2 = geom->positions[i2];
raytrace.c:				if (geom->normals) {
raytrace.c:					n0 = &(geom->normals[i0]);
raytrace.c:					n1 = &(geom->normals[i1]);
raytrace.c:					n2 = &(geom->normals[i2]);
raytrace.c:					if (geom->tangents &&
raytrace.c:					    geom->binormals) {
raytrace.c:						n0 = &(geom->tangents[i0]);
raytrace.c:						n1 = &(geom->tangents[i1]);
raytrace.c:						n2 = &(geom->tangents[i2]);
raytrace.c:						n0 = &(geom->binormals[i0]);
raytrace.c:						n1 = &(geom->binormals[i1]);
raytrace.c:						n2 = &(geom->binormals[i2]);
raytrace.c:				if (geom->colors) {
raytrace.c:					c0 = &(geom->colors[i0]);
raytrace.c:					c1 = &(geom->colors[i1]);
raytrace.c:					c2 = &(geom->colors[i2]);
raytrace.c:					//info->color = geom->colors[i0];
raytrace.c:				if (geom->opacities) {
raytrace.c:					info->opacity = geom->opacities[i0].e[0];
raytrace.c:				if (geom->texcoords) {
raytrace.c:						&geom->texcoords[2 * i0],
raytrace.c:						&geom->texcoords[2 * i1],
raytrace.c:						&geom->texcoords[2 * i2],
raytrace.c:				info->kd = geom->kd;
raytrace.c:				info->ks = geom->ks;
raytrace.c:		if (triinfo->index >= geom->nindices) {
raytrace.c:		i0 = geom->indices[triinfo->index + 0];
raytrace.c:		i1 = geom->indices[triinfo->index + 1];
raytrace.c:		i2 = geom->indices[triinfo->index + 2];
raytrace.c:		v0 = geom->positions[i0];
raytrace.c:		v1 = geom->positions[i1];
raytrace.c:		v2 = geom->positions[i2];
raytrace.c:		if (hitgeom->normals) {
raytrace.c:			n0 = hitgeom->normals[hi0];
raytrace.c:			n1 = hitgeom->normals[hi1];
raytrace.c:			n2 = hitgeom->normals[hi2];
raytrace.c:			if (hitgeom->tangents &&
raytrace.c:			    hitgeom->binormals) {
raytrace.c:				n0 = hitgeom->tangents[hi0];
raytrace.c:				n1 = hitgeom->tangents[hi1];
raytrace.c:				n2 = hitgeom->tangents[hi2];
raytrace.c:				n0 = hitgeom->binormals[hi0];
raytrace.c:				n1 = hitgeom->binormals[hi1];
raytrace.c:				n2 = hitgeom->binormals[hi2];
raytrace.c:			v0 = hitgeom->positions[hi0];
raytrace.c:			v1 = hitgeom->positions[hi1];
raytrace.c:			v2 = hitgeom->positions[hi2];
raytrace.c:		if (hitgeom->texcoords) {
raytrace.c:				&hitgeom->texcoords[2 * hi0],
raytrace.c:				&hitgeom->texcoords[2 * hi1],
raytrace.c:				&hitgeom->texcoords[2 * hi2],
raytrace.c:		if (hitgeom->colors) {
raytrace.c:			c0 = &(hitgeom->colors[hi0]);
raytrace.c:			c1 = &(hitgeom->colors[hi1]);
raytrace.c:			c2 = &(hitgeom->colors[hi2]);
raytrace.c:			//info->color = hitgeom->colors[hi0];
raytrace.c:		if (hitgeom->opacities) {
raytrace.c:				hitgeom->opacities[hi0].e[0];
raytrace.c:		info->kd = hitgeom->kd;
raytrace.c:		info->ks = hitgeom->ks;
raytrace.c:	i0 = tri.geom->indices[3 * tri.index + 0];
raytrace.c:	i1 = tri.geom->indices[3 * tri.index + 1];
raytrace.c:	i2 = tri.geom->indices[3 * tri.index + 2];
raytrace.c:	if (tri.geom->normals) {
raytrace.c:		n0 = &(tri.geom->normals[i0]);
raytrace.c:		n1 = &(tri.geom->normals[i1]);
raytrace.c:		n2 = &(tri.geom->normals[i2]);
raytrace.c:		if (tri.geom->tangents &&
raytrace.c:		    tri.geom->binormals) {
raytrace.c:			n0 = &(tri.geom->tangents[i0]);
raytrace.c:			n1 = &(tri.geom->tangents[i1]);
raytrace.c:			n2 = &(tri.geom->tangents[i2]);
raytrace.c:			n0 = &(tri.geom->binormals[i0]);
raytrace.c:			n1 = &(tri.geom->binormals[i1]);
raytrace.c:			n2 = &(tri.geom->binormals[i2]);
raytrace.c:	if (tri.geom->colors) {
raytrace.c:		c0 = &(tri.geom->colors[i0]);
raytrace.c:		c1 = &(tri.geom->colors[i1]);
raytrace.c:		c2 = &(tri.geom->colors[i2]);
raytrace.c:		//ri_vector_copy(&(info->color), tri.geom->colors[i0]);
raytrace.c:	if (tri.geom->opacities) {
raytrace.c:		info->opacity = tri.geom->opacities[i0].e[0];
raytrace.c:	info->kd    = tri.geom->kd;
raytrace.c:	info->ks    = tri.geom->ks;
raytrace.c:	i0 = geom->indices[index + 0];
raytrace.c:	i1 = geom->indices[index + 1];
raytrace.c:	i2 = geom->indices[index + 2];
raytrace.c:	v0 = &(geom->positions[i0]);
raytrace.c:	v1 = &(geom->positions[i1]);
raytrace.c:	v2 = &(geom->positions[i2]);
raytrace.c:	if (geom->normals) {
raytrace.c:		n0 = &(geom->normals[i0]);
raytrace.c:		n1 = &(geom->normals[i1]);
raytrace.c:		n2 = &(geom->normals[i2]);
raytrace.c:		if (geom->tangents && geom->binormals) {
raytrace.c:			n0 = &(geom->tangents[i0]);
raytrace.c:			n1 = &(geom->tangents[i1]);
raytrace.c:			n2 = &(geom->tangents[i2]);
raytrace.c:			n0 = &(geom->binormals[i0]);
raytrace.c:			n1 = &(geom->binormals[i1]);
raytrace.c:			n2 = &(geom->binormals[i2]);
raytrace.c:	if (geom->colors) {
raytrace.c:		c0 = &(geom->colors[i0]);
raytrace.c:		c1 = &(geom->colors[i1]);
raytrace.c:		c2 = &(geom->colors[i2]);
raytrace.c:		//ri_vector_copy(&(info->color), geom->colors[i0]);
raytrace.c:	if (geom->opacities) {
raytrace.c:		printf("nvertices = %d\n", geom->npositions);
raytrace.c:		printf("nindices = %d\n", geom->nindices);
raytrace.c:		printf("nopacities = %d\n", geom->nopacities);
raytrace.c:		info->opacity = geom->opacities[i0].e[0];
raytrace.c:	if (geom->texcoords) {
raytrace.c:			&geom->texcoords[2 * i0],
raytrace.c:			&geom->texcoords[2 * i1],
raytrace.c:			&geom->texcoords[2 * i2],
raytrace.c:	info->kd    = geom->kd;
raytrace.c:	info->ks    = geom->ks;
render.c:		if (geom->shader && strcmp(geom->shader, "bssrdf") == 0) {
render.c:		for (i = 0; i < geom->npositions; i++) {
render.c:			v = geom->positions[i];
render.c:		d = ri_vector_ave(surfinfo.geom->material->kd);
shading.c:	if (surfinfo->geom->shadername &&
shading.c:	    strcmp(surfinfo->geom->shadername, "bssrdf") == 0) {
shading.c:	if (surfinfo->geom->material &&
shading.c:	    surfinfo->geom->material->texture) {
shading.c:				 surfinfo->geom->material->texture,
transport.c:		material = result->surfinfo.geom->material;
transport.c:			if (result->surfinfo.geom->material &&
transport.c:			    result->surfinfo.geom->material->fresnel) {
