import os, sys

Import('env')

env = env.Clone()

#
# http://www.scons.org/wiki/FltkFluidBuilder
# 

# emitter to add the generated .h file to the dependencies
def fluidEmitter(target, source, env):
  file = os.path.splitext(str(source[0].name))[0]
  file = os.path.join(str(target[0].get_dir()), file)
  target.append("fluid_" + os.path.basename(file) + ".h")

  return target, source

fluidBuilder = Builder(action = "cd ${SOURCE.dir} && " +
                                "fluid -o fluid_${SOURCE.filebase}.cpp " +
                                "-h fluid_${SOURCE.filebase}.h -c ${SOURCE.name} ",
                       emitter = fluidEmitter,
                       src_suffix = '.fl',
                       suffix = '.cpp',
                       prefix = 'fluid_')

# register builder
env.Append( BUILDERS = { 'Fluid': fluidBuilder } )
env.Fluid( 'fluid_gui.cpp', 'gui.fl' )

# add builder to the builders for shared and static objects, 
# so we can use all sources in one list
# shared, static = SCons.Tool.createObjBuilders(env)
# shared.src_builder.append('Fluid')
# static.src_builder.append('Fluid')


#
# http://www.scons.org/wiki/AdvancedBuildExample
#
def ParseConfig(env,command,options):
    env_dict = env.Dictionary();
    static_libs = []

    # setup all the dictionary options
    if not env_dict.has_key('CPPPATH'):
        env_dict['CPPPATH'] = []

    if not env_dict.has_key('LIBPATH'):
        env_dict['LIBPATH'] = []

    if not env_dict.has_key('LIBS'):
        env_dict['LIBS'] = []

    if not env_dict.has_key('CXXFLAGS'):
        env_dict['CXXFLAGS'] = []

    if not env_dict.has_key('LINKFLAGS'):
        env_dict['LINKFLAGS'] = []

    # run the config program to get the options we need
    full_cmd = "%s %s" %  (WhereIs(command), os.path.join(options))

    # params = os.path.split(os.popen(full_cmd).read())
    params = os.popen(full_cmd).read().split()

    i = 0
    while i < len(params):
        arg = params[i]
        switch = arg[0:1]
        opt = arg[1:2]
        if switch == '-':
            if opt == 'L':
                env_dict['LIBPATH'].append(arg[2:])
            elif opt == 'l':
                env_dict['LIBS'].append(arg[2:])
            elif opt == 'I':
                env_dict['CPPPATH'].append(arg[2:])
            elif arg[1:] == 'framework':
                flags = [env_dict['LINKFLAGS']]
                flags.append(os.path.join(params[i:i+2]))
                env_dict['LINKFLAGS'] = os.path.join(flags)
                i = i + 1
            else:
                 env_dict['CXXFLAGS'].append(arg)
        else:
            static_libs.append(arg)
        i = i + 1

    return static_libs

ParseConfig(env, "fltk-config", "--use-gl --use-images --cxxflags")
ParseConfig(env, "fltk-config", "--use-gl --use-images --ldflags")

srcs=Split("""
fluid_gui.cpp
main.cpp
trackball.cpp
GLView.cpp
glm.cpp
controller.cpp
BVHVisualizer.cpp
simplerender.cpp
timer.c
""")

target = "testbed"
fltk_post_cmd = "fltk-config --post " + target
env['LINKCOM'] += " ; " + fltk_post_cmd

incPath=['../base', '../transport', '../render', '../ri', '../../include']
libs=['rirender', 'ritransport', 'riri', 'ridisplay',  'ribase', 'm']
if sys.platform == 'linux2':
	libs.append(['dl'])
libPath=['../base', '../display', '../transport', '../render', '../ri']

env['CPPPATH'].append(incPath)
env['LIBPATH'].append(libPath)
env['LIBS'].append(libs)

targetbin = env.Program(target, srcs)
